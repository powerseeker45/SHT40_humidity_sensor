
humidity_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000404c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004318  08004318  00005318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800432c  0800432c  0000532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08004330  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000008c  24000010  08004340  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400009c  08004340  0000609c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c826  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c6f  00000000  00000000  00012864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a60  00000000  00000000  000144d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007e0  00000000  00000000  00014f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030f73  00000000  00000000  00015718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e2e5  00000000  00000000  0004668b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00139f0e  00000000  00000000  00054970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0018e87e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000029e8  00000000  00000000  0018e8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000066  00000000  00000000  001912ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08004300 	.word	0x08004300

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08004300 	.word	0x08004300

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000312:	f000 f907 	bl	8000524 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fabd 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f82d 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8c9 	bl	80004b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000322:	f000 f887 	bl	8000434 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

      sht4x_sensor.i2c_handle = &hi2c1;  // Link I2C handle
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <main+0x50>)
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <main+0x54>)
 800032a:	601a      	str	r2, [r3, #0]
      sht4x_sensor.i2c_address = 0x44;
 800032c:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <main+0x50>)
 800032e:	2244      	movs	r2, #68	@ 0x44
 8000330:	711a      	strb	r2, [r3, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  status = sht4x_read(&sht4x_sensor, SHT4X_MODE_HIGH_PRECISION_WITH_NO_HEATER, &temp_raw, &temp, &hum_raw, &hum);
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <main+0x58>)
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <main+0x5c>)
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <main+0x60>)
 800033c:	4a0c      	ldr	r2, [pc, #48]	@ (8000370 <main+0x64>)
 800033e:	21fd      	movs	r1, #253	@ 0xfd
 8000340:	4806      	ldr	r0, [pc, #24]	@ (800035c <main+0x50>)
 8000342:	f003 fecd 	bl	80040e0 <sht4x_read>
 8000346:	4603      	mov	r3, r0
 8000348:	461a      	mov	r2, r3
 800034a:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <main+0x68>)
 800034c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 800034e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000352:	f000 fb31 	bl	80009b8 <HAL_Delay>
	  status = sht4x_read(&sht4x_sensor, SHT4X_MODE_HIGH_PRECISION_WITH_NO_HEATER, &temp_raw, &temp, &hum_raw, &hum);
 8000356:	bf00      	nop
 8000358:	e7eb      	b.n	8000332 <main+0x26>
 800035a:	bf00      	nop
 800035c:	24000080 	.word	0x24000080
 8000360:	2400002c 	.word	0x2400002c
 8000364:	24000090 	.word	0x24000090
 8000368:	2400008a 	.word	0x2400008a
 800036c:	2400008c 	.word	0x2400008c
 8000370:	24000088 	.word	0x24000088
 8000374:	24000094 	.word	0x24000094

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09c      	sub	sp, #112	@ 0x70
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000382:	224c      	movs	r2, #76	@ 0x4c
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 ff8e 	bl	80042a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2220      	movs	r2, #32
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f003 ff88 	bl	80042a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000398:	2002      	movs	r0, #2
 800039a:	f001 fc1d 	bl	8001bd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	4b23      	ldr	r3, [pc, #140]	@ (8000430 <SystemClock_Config+0xb8>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003aa:	4a21      	ldr	r2, [pc, #132]	@ (8000430 <SystemClock_Config+0xb8>)
 80003ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000430 <SystemClock_Config+0xb8>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003be:	bf00      	nop
 80003c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000430 <SystemClock_Config+0xb8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003cc:	d1f8      	bne.n	80003c0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ce:	2302      	movs	r3, #2
 80003d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003d6:	2340      	movs	r3, #64	@ 0x40
 80003d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003da:	2300      	movs	r3, #0
 80003dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fc32 	bl	8001c4c <HAL_RCC_OscConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ee:	f000 f8c5 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f2:	233f      	movs	r3, #63	@ 0x3f
 80003f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000406:	2340      	movs	r3, #64	@ 0x40
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2101      	movs	r1, #1
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fff2 	bl	8002400 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000422:	f000 f8ab 	bl	800057c <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3770      	adds	r7, #112	@ 0x70
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	58024800 	.word	0x58024800

08000434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000438:	4b1b      	ldr	r3, [pc, #108]	@ (80004a8 <MX_I2C1_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	@ (80004ac <MX_I2C1_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800043e:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <MX_I2C1_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <MX_I2C1_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <MX_I2C1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800046e:	480e      	ldr	r0, [pc, #56]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000470:	f000 fdca 	bl	8001008 <HAL_I2C_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 f87f 	bl	800057c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4809      	ldr	r0, [pc, #36]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000482:	f001 fb11 	bl	8001aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 f876 	bl	800057c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000490:	2100      	movs	r1, #0
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000494:	f001 fb53 	bl	8001b3e <HAL_I2CEx_ConfigDigitalFilter>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 f86d 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2400002c 	.word	0x2400002c
 80004ac:	40005400 	.word	0x40005400
 80004b0:	00707cbb 	.word	0x00707cbb

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	4b19      	ldr	r3, [pc, #100]	@ (8000520 <MX_GPIO_Init+0x6c>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004c0:	4a17      	ldr	r2, [pc, #92]	@ (8000520 <MX_GPIO_Init+0x6c>)
 80004c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004ca:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <MX_GPIO_Init+0x6c>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <MX_GPIO_Init+0x6c>)
 80004da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004de:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <MX_GPIO_Init+0x6c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <MX_GPIO_Init+0x6c>)
 80004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <MX_GPIO_Init+0x6c>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004fc:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <MX_GPIO_Init+0x6c>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <MX_GPIO_Init+0x6c>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050c:	f003 0302 	and.w	r3, r3, #2
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	58024400 	.word	0x58024400

08000524 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000536:	f000 fb47 	bl	8000bc8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800053a:	2301      	movs	r3, #1
 800053c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800053e:	2300      	movs	r3, #0
 8000540:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000546:	231f      	movs	r3, #31
 8000548:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800054a:	2387      	movs	r3, #135	@ 0x87
 800054c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800054e:	2300      	movs	r3, #0
 8000550:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000552:	2300      	movs	r3, #0
 8000554:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800055a:	2301      	movs	r3, #1
 800055c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000566:	463b      	mov	r3, r7
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fb65 	bl	8000c38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800056e:	2004      	movs	r0, #4
 8000570:	f000 fb42 	bl	8000bf8 <HAL_MPU_Enable>

}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <Error_Handler+0x8>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <HAL_MspInit+0x30>)
 8000590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000594:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <HAL_MspInit+0x30>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <HAL_MspInit+0x30>)
 80005a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	58024400 	.word	0x58024400

080005bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0b8      	sub	sp, #224	@ 0xe0
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	22b8      	movs	r2, #184	@ 0xb8
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fe63 	bl	80042a8 <memset>
  if(hi2c->Instance==I2C1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <HAL_I2C_MspInit+0xc4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d145      	bne.n	8000678 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005ec:	f04f 0208 	mov.w	r2, #8
 80005f0:	f04f 0300 	mov.w	r3, #0
 80005f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fa2c 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800060e:	f7ff ffb5 	bl	800057c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <HAL_I2C_MspInit+0xc8>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000618:	4a1a      	ldr	r2, [pc, #104]	@ (8000684 <HAL_I2C_MspInit+0xc8>)
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000622:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <HAL_I2C_MspInit+0xc8>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000628:	f003 0302 	and.w	r3, r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000630:	23c0      	movs	r3, #192	@ 0xc0
 8000632:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000636:	2312      	movs	r3, #18
 8000638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000648:	2304      	movs	r3, #4
 800064a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000652:	4619      	mov	r1, r3
 8000654:	480c      	ldr	r0, [pc, #48]	@ (8000688 <HAL_I2C_MspInit+0xcc>)
 8000656:	f000 fb2f 	bl	8000cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800065a:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <HAL_I2C_MspInit+0xc8>)
 800065c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000660:	4a08      	ldr	r2, [pc, #32]	@ (8000684 <HAL_I2C_MspInit+0xc8>)
 8000662:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000666:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <HAL_I2C_MspInit+0xc8>)
 800066c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000678:	bf00      	nop
 800067a:	37e0      	adds	r7, #224	@ 0xe0
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40005400 	.word	0x40005400
 8000684:	58024400 	.word	0x58024400
 8000688:	58020400 	.word	0x58020400

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <NMI_Handler+0x4>

08000694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <MemManage_Handler+0x4>

080006a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e2:	f000 f949 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006f0:	4b3e      	ldr	r3, [pc, #248]	@ (80007ec <SystemInit+0x100>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006f6:	4a3d      	ldr	r2, [pc, #244]	@ (80007ec <SystemInit+0x100>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000700:	4b3b      	ldr	r3, [pc, #236]	@ (80007f0 <SystemInit+0x104>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f003 030f 	and.w	r3, r3, #15
 8000708:	2b06      	cmp	r3, #6
 800070a:	d807      	bhi.n	800071c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800070c:	4b38      	ldr	r3, [pc, #224]	@ (80007f0 <SystemInit+0x104>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f023 030f 	bic.w	r3, r3, #15
 8000714:	4a36      	ldr	r2, [pc, #216]	@ (80007f0 <SystemInit+0x104>)
 8000716:	f043 0307 	orr.w	r3, r3, #7
 800071a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800071c:	4b35      	ldr	r3, [pc, #212]	@ (80007f4 <SystemInit+0x108>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a34      	ldr	r2, [pc, #208]	@ (80007f4 <SystemInit+0x108>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <SystemInit+0x108>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800072e:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <SystemInit+0x108>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4930      	ldr	r1, [pc, #192]	@ (80007f4 <SystemInit+0x108>)
 8000734:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <SystemInit+0x10c>)
 8000736:	4013      	ands	r3, r2
 8000738:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800073a:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x104>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	2b00      	cmp	r3, #0
 8000744:	d007      	beq.n	8000756 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000746:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x104>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f023 030f 	bic.w	r3, r3, #15
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x104>)
 8000750:	f043 0307 	orr.w	r3, r3, #7
 8000754:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <SystemInit+0x108>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800075c:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <SystemInit+0x108>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000762:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <SystemInit+0x108>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000768:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <SystemInit+0x108>)
 800076a:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <SystemInit+0x110>)
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800076e:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <SystemInit+0x108>)
 8000770:	4a23      	ldr	r2, [pc, #140]	@ (8000800 <SystemInit+0x114>)
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000774:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x108>)
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <SystemInit+0x118>)
 8000778:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800077a:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <SystemInit+0x108>)
 800077c:	2200      	movs	r2, #0
 800077e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000780:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <SystemInit+0x108>)
 8000782:	4a20      	ldr	r2, [pc, #128]	@ (8000804 <SystemInit+0x118>)
 8000784:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000786:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <SystemInit+0x108>)
 8000788:	2200      	movs	r2, #0
 800078a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800078c:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <SystemInit+0x108>)
 800078e:	4a1d      	ldr	r2, [pc, #116]	@ (8000804 <SystemInit+0x118>)
 8000790:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <SystemInit+0x108>)
 8000794:	2200      	movs	r2, #0
 8000796:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000798:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <SystemInit+0x108>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <SystemInit+0x108>)
 800079e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <SystemInit+0x108>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <SystemInit+0x108>)
 80007ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d113      	bne.n	80007e0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <SystemInit+0x108>)
 80007ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007be:	4a0d      	ldr	r2, [pc, #52]	@ (80007f4 <SystemInit+0x108>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <SystemInit+0x11c>)
 80007ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <SystemInit+0x108>)
 80007d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d6:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <SystemInit+0x108>)
 80007d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	52002000 	.word	0x52002000
 80007f4:	58024400 	.word	0x58024400
 80007f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007fc:	02020200 	.word	0x02020200
 8000800:	01ff0000 	.word	0x01ff0000
 8000804:	01010280 	.word	0x01010280
 8000808:	52004000 	.word	0x52004000

0800080c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <ExitRun0Mode+0x2c>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <ExitRun0Mode+0x2c>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800081c:	bf00      	nop
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <ExitRun0Mode+0x2c>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f9      	beq.n	800081e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	58024800 	.word	0x58024800

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800083c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000878 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000840:	f7ff ffe4 	bl	800080c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f7ff ff52 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	@ (800088c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086e:	f003 fd23 	bl	80042b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000872:	f7ff fd4b 	bl	800030c <main>
  bx  lr
 8000876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000878:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800087c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000880:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000884:	08004330 	.word	0x08004330
  ldr r2, =_sbss
 8000888:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800088c:	2400009c 	.word	0x2400009c

08000890 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC3_IRQHandler>
	...

08000894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089a:	2003      	movs	r0, #3
 800089c:	f000 f962 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008a0:	f001 ff64 	bl	800276c <HAL_RCC_GetSysClockFreq>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_Init+0x68>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	f003 030f 	and.w	r3, r3, #15
 80008b0:	4913      	ldr	r1, [pc, #76]	@ (8000900 <HAL_Init+0x6c>)
 80008b2:	5ccb      	ldrb	r3, [r1, r3]
 80008b4:	f003 031f 	and.w	r3, r3, #31
 80008b8:	fa22 f303 	lsr.w	r3, r2, r3
 80008bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_Init+0x68>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <HAL_Init+0x6c>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	f003 031f 	and.w	r3, r3, #31
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	fa22 f303 	lsr.w	r3, r2, r3
 80008d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <HAL_Init+0x70>)
 80008d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000908 <HAL_Init+0x74>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f814 	bl	800090c <HAL_InitTick>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e002      	b.n	80008f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008ee:	f7ff fe4b 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	58024400 	.word	0x58024400
 8000900:	08004318 	.word	0x08004318
 8000904:	24000004 	.word	0x24000004
 8000908:	24000000 	.word	0x24000000

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_InitTick+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e021      	b.n	8000964 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000920:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <HAL_InitTick+0x64>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <HAL_InitTick+0x60>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f939 	bl	8000bae <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f911 	bl	8000b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <HAL_InitTick+0x68>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2400000c 	.word	0x2400000c
 8000970:	24000000 	.word	0x24000000
 8000974:	24000008 	.word	0x24000008

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2400000c 	.word	0x2400000c
 800099c:	24000098 	.word	0x24000098

080009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	24000098 	.word	0x24000098

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff ffee 	bl	80009a0 <HAL_GetTick>
 80009c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_Delay+0x44>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009de:	bf00      	nop
 80009e0:	f7ff ffde 	bl	80009a0 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2400000c 	.word	0x2400000c

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x40>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <__NVIC_SetPriorityGrouping+0x40>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	05fa0000 	.word	0x05fa0000

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	@ (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	@ 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f7ff ff8e 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff47 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff5e 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff90 	bl	8000ab8 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5f 	bl	8000a64 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb2 	bl	8000b20 <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bcc:	f3bf 8f5f 	dmb	sy
}
 8000bd0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <HAL_MPU_Disable+0x28>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd6:	4a06      	ldr	r2, [pc, #24]	@ (8000bf0 <HAL_MPU_Disable+0x28>)
 8000bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bdc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_MPU_Disable+0x2c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	605a      	str	r2, [r3, #4]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	e000ed90 	.word	0xe000ed90

08000bf8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c00:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <HAL_MPU_Enable+0x38>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_MPU_Enable+0x3c>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0e:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <HAL_MPU_Enable+0x3c>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c14:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c16:	f3bf 8f4f 	dsb	sy
}
 8000c1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c1c:	f3bf 8f6f 	isb	sy
}
 8000c20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed90 	.word	0xe000ed90
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	785a      	ldrb	r2, [r3, #1]
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8000c46:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c54:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7b1b      	ldrb	r3, [r3, #12]
 8000c60:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7adb      	ldrb	r3, [r3, #11]
 8000c66:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7a9b      	ldrb	r3, [r3, #10]
 8000c6e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7b5b      	ldrb	r3, [r3, #13]
 8000c76:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7b9b      	ldrb	r3, [r3, #14]
 8000c7e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7bdb      	ldrb	r3, [r3, #15]
 8000c86:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7a5b      	ldrb	r3, [r3, #9]
 8000c8e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7a1b      	ldrb	r3, [r3, #8]
 8000c96:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c98:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ca2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca4:	6113      	str	r3, [r2, #16]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed90 	.word	0xe000ed90

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	@ 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cc6:	4b86      	ldr	r3, [pc, #536]	@ (8000ee0 <HAL_GPIO_Init+0x228>)
 8000cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cca:	e18c      	b.n	8000fe6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 817e 	beq.w	8000fe0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <HAL_GPIO_Init+0x44>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d130      	bne.n	8000d5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d32:	2201      	movs	r2, #1
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	091b      	lsrs	r3, r3, #4
 8000d48:	f003 0201 	and.w	r2, r3, #1
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d017      	beq.n	8000d9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	69b9      	ldr	r1, [r7, #24]
 8000dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0203 	and.w	r2, r3, #3
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 80d8 	beq.w	8000fe0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_GPIO_Init+0x22c>)
 8000e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e36:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee4 <HAL_GPIO_Init+0x22c>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e40:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <HAL_GPIO_Init+0x22c>)
 8000e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a26      	ldr	r2, [pc, #152]	@ (8000ee8 <HAL_GPIO_Init+0x230>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a1d      	ldr	r2, [pc, #116]	@ (8000eec <HAL_GPIO_Init+0x234>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d04a      	beq.n	8000f10 <HAL_GPIO_Init+0x258>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef0 <HAL_GPIO_Init+0x238>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d02b      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef4 <HAL_GPIO_Init+0x23c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d025      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef8 <HAL_GPIO_Init+0x240>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01f      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a19      	ldr	r2, [pc, #100]	@ (8000efc <HAL_GPIO_Init+0x244>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a18      	ldr	r2, [pc, #96]	@ (8000f00 <HAL_GPIO_Init+0x248>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <HAL_GPIO_Init+0x24c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a16      	ldr	r2, [pc, #88]	@ (8000f08 <HAL_GPIO_Init+0x250>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a15      	ldr	r2, [pc, #84]	@ (8000f0c <HAL_GPIO_Init+0x254>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x206>
 8000eba:	2309      	movs	r3, #9
 8000ebc:	e029      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	e027      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e025      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e023      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e021      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e01f      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e01d      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e01b      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e019      	b.n	8000f12 <HAL_GPIO_Init+0x25a>
 8000ede:	bf00      	nop
 8000ee0:	58000080 	.word	0x58000080
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58000400 	.word	0x58000400
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	58020400 	.word	0x58020400
 8000ef4:	58020800 	.word	0x58020800
 8000ef8:	58020c00 	.word	0x58020c00
 8000efc:	58021000 	.word	0x58021000
 8000f00:	58021400 	.word	0x58021400
 8000f04:	58021800 	.word	0x58021800
 8000f08:	58021c00 	.word	0x58021c00
 8000f0c:	58022400 	.word	0x58022400
 8000f10:	2300      	movs	r3, #0
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	f002 0203 	and.w	r2, r2, #3
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	4093      	lsls	r3, r2
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f22:	4938      	ldr	r1, [pc, #224]	@ (8001004 <HAL_GPIO_Init+0x34c>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f47f ae6b 	bne.w	8000ccc <HAL_GPIO_Init+0x14>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3724      	adds	r7, #36	@ 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	58000400 	.word	0x58000400

08001008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e08b      	b.n	8001132 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d106      	bne.n	8001034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fac4 	bl	80005bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2224      	movs	r2, #36	@ 0x24
 8001038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001058:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001068:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d107      	bne.n	8001082 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	e006      	b.n	8001090 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800108e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d108      	bne.n	80010aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	e007      	b.n	80010ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6859      	ldr	r1, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <HAL_I2C_Init+0x134>)
 80010c6:	430b      	orrs	r3, r1
 80010c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69d9      	ldr	r1, [r3, #28]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	02008000 	.word	0x02008000

08001140 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af02      	add	r7, sp, #8
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	461a      	mov	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	817b      	strh	r3, [r7, #10]
 8001150:	4613      	mov	r3, r2
 8001152:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b20      	cmp	r3, #32
 800115e:	f040 80fd 	bne.w	800135c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_I2C_Master_Transmit+0x30>
 800116c:	2302      	movs	r3, #2
 800116e:	e0f6      	b.n	800135e <HAL_I2C_Master_Transmit+0x21e>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001178:	f7ff fc12 	bl	80009a0 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2319      	movs	r3, #25
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 fa0a 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0e1      	b.n	800135e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2221      	movs	r2, #33	@ 0x21
 800119e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2210      	movs	r2, #16
 80011a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	893a      	ldrh	r2, [r7, #8]
 80011ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	2bff      	cmp	r3, #255	@ 0xff
 80011ca:	d906      	bls.n	80011da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	22ff      	movs	r2, #255	@ 0xff
 80011d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80011d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e007      	b.n	80011ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80011e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d024      	beq.n	800123c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800120c:	b29b      	uxth	r3, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	b29a      	uxth	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800121a:	3b01      	subs	r3, #1
 800121c:	b29a      	uxth	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001226:	b2db      	uxtb	r3, r3
 8001228:	3301      	adds	r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	8979      	ldrh	r1, [r7, #10]
 800122e:	4b4e      	ldr	r3, [pc, #312]	@ (8001368 <HAL_I2C_Master_Transmit+0x228>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 fc05 	bl	8001a44 <I2C_TransferConfig>
 800123a:	e066      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001240:	b2da      	uxtb	r2, r3
 8001242:	8979      	ldrh	r1, [r7, #10]
 8001244:	4b48      	ldr	r3, [pc, #288]	@ (8001368 <HAL_I2C_Master_Transmit+0x228>)
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fbfa 	bl	8001a44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001250:	e05b      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	6a39      	ldr	r1, [r7, #32]
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 f9fd 	bl	8001656 <I2C_WaitOnTXISFlagUntilTimeout>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e07b      	b.n	800135e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001280:	b29b      	uxth	r3, r3
 8001282:	3b01      	subs	r3, #1
 8001284:	b29a      	uxth	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800128e:	3b01      	subs	r3, #1
 8001290:	b29a      	uxth	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800129a:	b29b      	uxth	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d034      	beq.n	800130a <HAL_I2C_Master_Transmit+0x1ca>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d130      	bne.n	800130a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	2200      	movs	r2, #0
 80012b0:	2180      	movs	r1, #128	@ 0x80
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f976 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e04d      	b.n	800135e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	2bff      	cmp	r3, #255	@ 0xff
 80012ca:	d90e      	bls.n	80012ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	22ff      	movs	r2, #255	@ 0xff
 80012d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	8979      	ldrh	r1, [r7, #10]
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 fbae 	bl	8001a44 <I2C_TransferConfig>
 80012e8:	e00f      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	8979      	ldrh	r1, [r7, #10]
 80012fc:	2300      	movs	r3, #0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 fb9d 	bl	8001a44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800130e:	b29b      	uxth	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d19e      	bne.n	8001252 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	6a39      	ldr	r1, [r7, #32]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f9e3 	bl	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e01a      	b.n	800135e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2220      	movs	r2, #32
 800132e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6859      	ldr	r1, [r3, #4]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <HAL_I2C_Master_Transmit+0x22c>)
 800133c:	400b      	ands	r3, r1
 800133e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2220      	movs	r2, #32
 8001344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	e000      	b.n	800135e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800135c:	2302      	movs	r3, #2
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	80002000 	.word	0x80002000
 800136c:	fe00e800 	.word	0xfe00e800

08001370 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af02      	add	r7, sp, #8
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	461a      	mov	r2, r3
 800137c:	460b      	mov	r3, r1
 800137e:	817b      	strh	r3, [r7, #10]
 8001380:	4613      	mov	r3, r2
 8001382:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b20      	cmp	r3, #32
 800138e:	f040 80db 	bne.w	8001548 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001398:	2b01      	cmp	r3, #1
 800139a:	d101      	bne.n	80013a0 <HAL_I2C_Master_Receive+0x30>
 800139c:	2302      	movs	r3, #2
 800139e:	e0d4      	b.n	800154a <HAL_I2C_Master_Receive+0x1da>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013a8:	f7ff fafa 	bl	80009a0 <HAL_GetTick>
 80013ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2319      	movs	r3, #25
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f8f2 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0bf      	b.n	800154a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2222      	movs	r2, #34	@ 0x22
 80013ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2210      	movs	r2, #16
 80013d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	893a      	ldrh	r2, [r7, #8]
 80013ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	2bff      	cmp	r3, #255	@ 0xff
 80013fa:	d90e      	bls.n	800141a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	22ff      	movs	r2, #255	@ 0xff
 8001400:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001406:	b2da      	uxtb	r2, r3
 8001408:	8979      	ldrh	r1, [r7, #10]
 800140a:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <HAL_I2C_Master_Receive+0x1e4>)
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f000 fb16 	bl	8001a44 <I2C_TransferConfig>
 8001418:	e06d      	b.n	80014f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800141e:	b29a      	uxth	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001428:	b2da      	uxtb	r2, r3
 800142a:	8979      	ldrh	r1, [r7, #10]
 800142c:	4b49      	ldr	r3, [pc, #292]	@ (8001554 <HAL_I2C_Master_Receive+0x1e4>)
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fb05 	bl	8001a44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800143a:	e05c      	b.n	80014f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	6a39      	ldr	r1, [r7, #32]
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 f993 	bl	800176c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e07c      	b.n	800154a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800146c:	3b01      	subs	r3, #1
 800146e:	b29a      	uxth	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001478:	b29b      	uxth	r3, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	b29a      	uxth	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001486:	b29b      	uxth	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d034      	beq.n	80014f6 <HAL_I2C_Master_Receive+0x186>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	d130      	bne.n	80014f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	2200      	movs	r2, #0
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f880 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e04d      	b.n	800154a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2bff      	cmp	r3, #255	@ 0xff
 80014b6:	d90e      	bls.n	80014d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	22ff      	movs	r2, #255	@ 0xff
 80014bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	8979      	ldrh	r1, [r7, #10]
 80014c6:	2300      	movs	r3, #0
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 fab8 	bl	8001a44 <I2C_TransferConfig>
 80014d4:	e00f      	b.n	80014f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014da:	b29a      	uxth	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	8979      	ldrh	r1, [r7, #10]
 80014e8:	2300      	movs	r3, #0
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 faa7 	bl	8001a44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d19d      	bne.n	800143c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	6a39      	ldr	r1, [r7, #32]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f8ed 	bl	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e01a      	b.n	800154a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2220      	movs	r2, #32
 800151a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6859      	ldr	r1, [r3, #4]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_I2C_Master_Receive+0x1e8>)
 8001528:	400b      	ands	r3, r1
 800152a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2220      	movs	r2, #32
 8001530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	e000      	b.n	800154a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001548:	2302      	movs	r3, #2
  }
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	80002400 	.word	0x80002400
 8001558:	fe00e800 	.word	0xfe00e800

0800155c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b02      	cmp	r3, #2
 8001570:	d103      	bne.n	800157a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d007      	beq.n	8001598 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	619a      	str	r2, [r3, #24]
  }
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015b4:	e03b      	b.n	800162e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	6839      	ldr	r1, [r7, #0]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f962 	bl	8001884 <I2C_IsErrorOccurred>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e041      	b.n	800164e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d02d      	beq.n	800162e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d2:	f7ff f9e5 	bl	80009a0 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d302      	bcc.n	80015e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d122      	bne.n	800162e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699a      	ldr	r2, [r3, #24]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	4013      	ands	r3, r2
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	429a      	cmp	r2, r3
 8001604:	d113      	bne.n	800162e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f043 0220 	orr.w	r2, r3, #32
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4013      	ands	r3, r2
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	429a      	cmp	r2, r3
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	429a      	cmp	r2, r3
 800164a:	d0b4      	beq.n	80015b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001662:	e033      	b.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f90b 	bl	8001884 <I2C_IsErrorOccurred>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e031      	b.n	80016dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d025      	beq.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001680:	f7ff f98e 	bl	80009a0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	d302      	bcc.n	8001696 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d11a      	bne.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d013      	beq.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	f043 0220 	orr.w	r2, r3, #32
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e007      	b.n	80016dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d1c4      	bne.n	8001664 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f0:	e02f      	b.n	8001752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f8c4 	bl	8001884 <I2C_IsErrorOccurred>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e02d      	b.n	8001762 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001706:	f7ff f94b 	bl	80009a0 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	429a      	cmp	r2, r3
 8001714:	d302      	bcc.n	800171c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d11a      	bne.n	8001752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b20      	cmp	r3, #32
 8001728:	d013      	beq.n	8001752 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f043 0220 	orr.w	r2, r3, #32
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e007      	b.n	8001762 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b20      	cmp	r3, #32
 800175e:	d1c8      	bne.n	80016f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800177c:	e071      	b.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f87e 	bl	8001884 <I2C_IsErrorOccurred>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	2b20      	cmp	r3, #32
 800179e:	d13b      	bne.n	8001818 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d138      	bne.n	8001818 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d105      	bne.n	80017c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d121      	bne.n	8001812 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2210      	movs	r2, #16
 80017d4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2204      	movs	r2, #4
 80017da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2220      	movs	r2, #32
 80017e2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80017f0:	400b      	ands	r3, r1
 80017f2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	75fb      	strb	r3, [r7, #23]
 8001810:	e002      	b.n	8001818 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001818:	f7ff f8c2 	bl	80009a0 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	429a      	cmp	r2, r3
 8001826:	d302      	bcc.n	800182e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d119      	bne.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d116      	bne.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b04      	cmp	r3, #4
 8001840:	d00f      	beq.n	8001862 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f043 0220 	orr.w	r2, r3, #32
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b04      	cmp	r3, #4
 800186e:	d002      	beq.n	8001876 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d083      	beq.n	800177e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	fe00e800 	.word	0xfe00e800

08001884 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d068      	beq.n	8001982 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2210      	movs	r2, #16
 80018b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018b8:	e049      	b.n	800194e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d045      	beq.n	800194e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018c2:	f7ff f86d 	bl	80009a0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d302      	bcc.n	80018d8 <I2C_IsErrorOccurred+0x54>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d13a      	bne.n	800194e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018fa:	d121      	bne.n	8001940 <I2C_IsErrorOccurred+0xbc>
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001902:	d01d      	beq.n	8001940 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001904:	7cfb      	ldrb	r3, [r7, #19]
 8001906:	2b20      	cmp	r3, #32
 8001908:	d01a      	beq.n	8001940 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001918:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800191a:	f7ff f841 	bl	80009a0 <HAL_GetTick>
 800191e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001920:	e00e      	b.n	8001940 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001922:	f7ff f83d 	bl	80009a0 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b19      	cmp	r3, #25
 800192e:	d907      	bls.n	8001940 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f043 0320 	orr.w	r3, r3, #32
 8001936:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800193e:	e006      	b.n	800194e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0320 	and.w	r3, r3, #32
 800194a:	2b20      	cmp	r3, #32
 800194c:	d1e9      	bne.n	8001922 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	2b20      	cmp	r3, #32
 800195a:	d003      	beq.n	8001964 <I2C_IsErrorOccurred+0xe0>
 800195c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0aa      	beq.n	80018ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2220      	movs	r2, #32
 8001972:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00b      	beq.n	80019ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	f043 0308 	orr.w	r3, r3, #8
 80019bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00b      	beq.n	80019f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80019f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01c      	beq.n	8001a32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff fdaf 	bl	800155c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <I2C_IsErrorOccurred+0x1bc>)
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001a32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3728      	adds	r7, #40	@ 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	fe00e800 	.word	0xfe00e800

08001a44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	817b      	strh	r3, [r7, #10]
 8001a52:	4613      	mov	r3, r2
 8001a54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a56:	897b      	ldrh	r3, [r7, #10]
 8001a58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a5c:	7a7b      	ldrb	r3, [r7, #9]
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a64:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a72:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	0d5b      	lsrs	r3, r3, #21
 8001a7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <I2C_TransferConfig+0x60>)
 8001a84:	430b      	orrs	r3, r1
 8001a86:	43db      	mvns	r3, r3
 8001a88:	ea02 0103 	and.w	r1, r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	03ff63ff 	.word	0x03ff63ff

08001aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d138      	bne.n	8001b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e032      	b.n	8001b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2224      	movs	r2, #36	@ 0x24
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d139      	bne.n	8001bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e033      	b.n	8001bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2224      	movs	r2, #36	@ 0x24
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001be0:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_PWREx_ConfigSupply+0x70>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00a      	beq.n	8001c02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <HAL_PWREx_ConfigSupply+0x70>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e01f      	b.n	8001c3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e01d      	b.n	8001c3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_PWREx_ConfigSupply+0x70>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	490f      	ldr	r1, [pc, #60]	@ (8001c48 <HAL_PWREx_ConfigSupply+0x70>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c12:	f7fe fec5 	bl	80009a0 <HAL_GetTick>
 8001c16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c18:	e009      	b.n	8001c2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c1a:	f7fe fec1 	bl	80009a0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c28:	d901      	bls.n	8001c2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e007      	b.n	8001c3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_PWREx_ConfigSupply+0x70>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	58024800 	.word	0x58024800

08001c4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	@ 0x30
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e3c8      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8087 	beq.w	8001d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6c:	4b88      	ldr	r3, [pc, #544]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c76:	4b86      	ldr	r3, [pc, #536]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d007      	beq.n	8001c92 <HAL_RCC_OscConfig+0x46>
 8001c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c84:	2b18      	cmp	r3, #24
 8001c86:	d110      	bne.n	8001caa <HAL_RCC_OscConfig+0x5e>
 8001c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d10b      	bne.n	8001caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c92:	4b7f      	ldr	r3, [pc, #508]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d06c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x12c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d168      	bne.n	8001d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e3a2      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x76>
 8001cb4:	4b76      	ldr	r3, [pc, #472]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a75      	ldr	r2, [pc, #468]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e02e      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x98>
 8001cca:	4b71      	ldr	r3, [pc, #452]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a70      	ldr	r2, [pc, #448]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6d      	ldr	r2, [pc, #436]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0xbc>
 8001cee:	4b68      	ldr	r3, [pc, #416]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a67      	ldr	r2, [pc, #412]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b65      	ldr	r3, [pc, #404]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a64      	ldr	r2, [pc, #400]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xd4>
 8001d08:	4b61      	ldr	r3, [pc, #388]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a60      	ldr	r2, [pc, #384]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b5e      	ldr	r3, [pc, #376]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a5d      	ldr	r2, [pc, #372]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7fe fe3a 	bl	80009a0 <HAL_GetTick>
 8001d2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7fe fe36 	bl	80009a0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	@ 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e356      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d42:	4b53      	ldr	r3, [pc, #332]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xe4>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7fe fe26 	bl	80009a0 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7fe fe22 	bl	80009a0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	@ 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e342      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d6a:	4b49      	ldr	r3, [pc, #292]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x10c>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 808c 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d88:	4b41      	ldr	r3, [pc, #260]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d92:	4b3f      	ldr	r3, [pc, #252]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_RCC_OscConfig+0x162>
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b18      	cmp	r3, #24
 8001da2:	d137      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1c8>
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d132      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e314      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dc6:	4b32      	ldr	r3, [pc, #200]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 0219 	bic.w	r2, r3, #25
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	492f      	ldr	r1, [pc, #188]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fde2 	bl	80009a0 <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de0:	f7fe fdde 	bl	80009a0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e2fe      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001df2:	4b27      	ldr	r3, [pc, #156]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfe:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	4920      	ldr	r1, [pc, #128]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e12:	e045      	b.n	8001ea0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d026      	beq.n	8001e6a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 0219 	bic.w	r2, r3, #25
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4919      	ldr	r1, [pc, #100]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7fe fdb7 	bl	80009a0 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e36:	f7fe fdb3 	bl	80009a0 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e2d3      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	061b      	lsls	r3, r3, #24
 8001e62:	490b      	ldr	r1, [pc, #44]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
 8001e68:	e01a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a08      	ldr	r2, [pc, #32]	@ (8001e90 <HAL_RCC_OscConfig+0x244>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe fd93 	bl	80009a0 <HAL_GetTick>
 8001e7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7fe fd8f 	bl	80009a0 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d903      	bls.n	8001e94 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e2af      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
 8001e90:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e94:	4b96      	ldr	r3, [pc, #600]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d06a      	beq.n	8001f82 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eac:	4b90      	ldr	r3, [pc, #576]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eb4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eb6:	4b8e      	ldr	r3, [pc, #568]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d007      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x286>
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b18      	cmp	r3, #24
 8001ec6:	d11b      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2b4>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d116      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ed2:	4b87      	ldr	r3, [pc, #540]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x29e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b80      	cmp	r3, #128	@ 0x80
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e282      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eea:	4b81      	ldr	r3, [pc, #516]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	061b      	lsls	r3, r3, #24
 8001ef8:	497d      	ldr	r1, [pc, #500]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001efe:	e040      	b.n	8001f82 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d023      	beq.n	8001f50 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f08:	4b79      	ldr	r3, [pc, #484]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a78      	ldr	r2, [pc, #480]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe fd44 	bl	80009a0 <HAL_GetTick>
 8001f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fd40 	bl	80009a0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e260      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f2e:	4b70      	ldr	r3, [pc, #448]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	4969      	ldr	r1, [pc, #420]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60cb      	str	r3, [r1, #12]
 8001f4e:	e018      	b.n	8001f82 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f50:	4b67      	ldr	r3, [pc, #412]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a66      	ldr	r2, [pc, #408]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fd20 	bl	80009a0 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f64:	f7fe fd1c 	bl	80009a0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e23c      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f76:	4b5e      	ldr	r3, [pc, #376]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d036      	beq.n	8001ffc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d019      	beq.n	8001fca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f96:	4b56      	ldr	r3, [pc, #344]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f9a:	4a55      	ldr	r2, [pc, #340]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fcfd 	bl	80009a0 <HAL_GetTick>
 8001fa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001faa:	f7fe fcf9 	bl	80009a0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e219      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x35e>
 8001fc8:	e018      	b.n	8001ffc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fca:	4b49      	ldr	r3, [pc, #292]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fce:	4a48      	ldr	r2, [pc, #288]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fce3 	bl	80009a0 <HAL_GetTick>
 8001fda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fde:	f7fe fcdf 	bl	80009a0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e1ff      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ff0:	4b3f      	ldr	r3, [pc, #252]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8001ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b00      	cmp	r3, #0
 8002006:	d036      	beq.n	8002076 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d019      	beq.n	8002044 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002010:	4b37      	ldr	r3, [pc, #220]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a36      	ldr	r2, [pc, #216]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8002016:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800201a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800201c:	f7fe fcc0 	bl	80009a0 <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002024:	f7fe fcbc 	bl	80009a0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1dc      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002036:	4b2e      	ldr	r3, [pc, #184]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x3d8>
 8002042:	e018      	b.n	8002076 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002044:	4b2a      	ldr	r3, [pc, #168]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a29      	ldr	r2, [pc, #164]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 800204a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800204e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002050:	f7fe fca6 	bl	80009a0 <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002058:	f7fe fca2 	bl	80009a0 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1c2      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800206a:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8086 	beq.w	8002190 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002084:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <HAL_RCC_OscConfig+0x4a8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <HAL_RCC_OscConfig+0x4a8>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002090:	f7fe fc86 	bl	80009a0 <HAL_GetTick>
 8002094:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002098:	f7fe fc82 	bl	80009a0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	@ 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1a2      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_RCC_OscConfig+0x4a8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d106      	bne.n	80020cc <HAL_RCC_OscConfig+0x480>
 80020be:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	4a0b      	ldr	r2, [pc, #44]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ca:	e032      	b.n	8002132 <HAL_RCC_OscConfig+0x4e6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4ac>
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e0:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e4:	4a02      	ldr	r2, [pc, #8]	@ (80020f0 <HAL_RCC_OscConfig+0x4a4>)
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ec:	e021      	b.n	8002132 <HAL_RCC_OscConfig+0x4e6>
 80020ee:	bf00      	nop
 80020f0:	58024400 	.word	0x58024400
 80020f4:	58024800 	.word	0x58024800
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d10c      	bne.n	800211a <HAL_RCC_OscConfig+0x4ce>
 8002100:	4b83      	ldr	r3, [pc, #524]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	4a82      	ldr	r2, [pc, #520]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6713      	str	r3, [r2, #112]	@ 0x70
 800210c:	4b80      	ldr	r3, [pc, #512]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002110:	4a7f      	ldr	r2, [pc, #508]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	@ 0x70
 8002118:	e00b      	b.n	8002132 <HAL_RCC_OscConfig+0x4e6>
 800211a:	4b7d      	ldr	r3, [pc, #500]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211e:	4a7c      	ldr	r2, [pc, #496]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6713      	str	r3, [r2, #112]	@ 0x70
 8002126:	4b7a      	ldr	r3, [pc, #488]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	4a79      	ldr	r2, [pc, #484]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d015      	beq.n	8002166 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe fc31 	bl	80009a0 <HAL_GetTick>
 800213e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fc2d 	bl	80009a0 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e14b      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002158:	4b6d      	ldr	r3, [pc, #436]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ee      	beq.n	8002142 <HAL_RCC_OscConfig+0x4f6>
 8002164:	e014      	b.n	8002190 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe fc1b 	bl	80009a0 <HAL_GetTick>
 800216a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7fe fc17 	bl	80009a0 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e135      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002184:	4b62      	ldr	r3, [pc, #392]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ee      	bne.n	800216e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 812a 	beq.w	80023ee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800219a:	4b5d      	ldr	r3, [pc, #372]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021a2:	2b18      	cmp	r3, #24
 80021a4:	f000 80ba 	beq.w	800231c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	f040 8095 	bne.w	80022dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a56      	ldr	r2, [pc, #344]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80021b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7fe fbef 	bl	80009a0 <HAL_GetTick>
 80021c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe fbeb 	bl	80009a0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e10b      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80021e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_RCC_OscConfig+0x6c8>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	430a      	orrs	r2, r1
 80021f8:	4945      	ldr	r1, [pc, #276]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	3b01      	subs	r3, #1
 8002204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220c:	3b01      	subs	r3, #1
 800220e:	025b      	lsls	r3, r3, #9
 8002210:	b29b      	uxth	r3, r3
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002218:	3b01      	subs	r3, #1
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002226:	3b01      	subs	r3, #1
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800222e:	4938      	ldr	r1, [pc, #224]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002230:	4313      	orrs	r3, r2
 8002232:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002234:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	4a35      	ldr	r2, [pc, #212]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002244:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HAL_RCC_OscConfig+0x6cc>)
 8002246:	4013      	ands	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800224c:	00d2      	lsls	r2, r2, #3
 800224e:	4930      	ldr	r1, [pc, #192]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002254:	4b2e      	ldr	r3, [pc, #184]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002258:	f023 020c 	bic.w	r2, r3, #12
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	492b      	ldr	r1, [pc, #172]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002266:	4b2a      	ldr	r3, [pc, #168]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	f023 0202 	bic.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	4927      	ldr	r1, [pc, #156]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800227a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227c:	4a24      	ldr	r2, [pc, #144]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800227e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002284:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800228a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800228e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002290:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	4a1e      	ldr	r2, [pc, #120]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002296:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800229a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800229c:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a18      	ldr	r2, [pc, #96]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fb74 	bl	80009a0 <HAL_GetTick>
 80022b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fb70 	bl	80009a0 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e090      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x670>
 80022da:	e088      	b.n	80023ee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fb5a 	bl	80009a0 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fb56 	bl	80009a0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e076      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002302:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_RCC_OscConfig+0x6c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x6a4>
 800230e:	e06e      	b.n	80023ee <HAL_RCC_OscConfig+0x7a2>
 8002310:	58024400 	.word	0x58024400
 8002314:	fffffc0c 	.word	0xfffffc0c
 8002318:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800231c:	4b36      	ldr	r3, [pc, #216]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002322:	4b35      	ldr	r3, [pc, #212]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232c:	2b01      	cmp	r3, #1
 800232e:	d031      	beq.n	8002394 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0203 	and.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d12a      	bne.n	8002394 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d122      	bne.n	8002394 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d11a      	bne.n	8002394 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	0a5b      	lsrs	r3, r3, #9
 8002362:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d111      	bne.n	8002394 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	0c1b      	lsrs	r3, r3, #16
 8002374:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d108      	bne.n	8002394 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0e1b      	lsrs	r3, r3, #24
 8002386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e02b      	b.n	80023f0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002398:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 800239a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d01f      	beq.n	80023ee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023ba:	f7fe faf1 	bl	80009a0 <HAL_GetTick>
 80023be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80023c0:	bf00      	nop
 80023c2:	f7fe faed 	bl	80009a0 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d0f9      	beq.n	80023c2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 80023d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d2:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <HAL_RCC_OscConfig+0x7b0>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023da:	00d2      	lsls	r2, r2, #3
 80023dc:	4906      	ldr	r1, [pc, #24]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80023e2:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <HAL_RCC_OscConfig+0x7ac>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3730      	adds	r7, #48	@ 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	58024400 	.word	0x58024400
 80023fc:	ffff0007 	.word	0xffff0007

08002400 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e19c      	b.n	800274e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b8a      	ldr	r3, [pc, #552]	@ (8002640 <HAL_RCC_ClockConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b87      	ldr	r3, [pc, #540]	@ (8002640 <HAL_RCC_ClockConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 020f 	bic.w	r2, r3, #15
 800242a:	4985      	ldr	r1, [pc, #532]	@ (8002640 <HAL_RCC_ClockConfig+0x240>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b83      	ldr	r3, [pc, #524]	@ (8002640 <HAL_RCC_ClockConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e184      	b.n	800274e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	4b7b      	ldr	r3, [pc, #492]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800245c:	429a      	cmp	r2, r3
 800245e:	d908      	bls.n	8002472 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002460:	4b78      	ldr	r3, [pc, #480]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	4975      	ldr	r1, [pc, #468]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 800246e:	4313      	orrs	r3, r2
 8002470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d010      	beq.n	80024a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	4b70      	ldr	r3, [pc, #448]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800248a:	429a      	cmp	r2, r3
 800248c:	d908      	bls.n	80024a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800248e:	4b6d      	ldr	r3, [pc, #436]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	496a      	ldr	r1, [pc, #424]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 800249c:	4313      	orrs	r3, r2
 800249e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d010      	beq.n	80024ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	4b64      	ldr	r3, [pc, #400]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d908      	bls.n	80024ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024bc:	4b61      	ldr	r3, [pc, #388]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	495e      	ldr	r1, [pc, #376]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d010      	beq.n	80024fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	4b59      	ldr	r3, [pc, #356]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d908      	bls.n	80024fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024ea:	4b56      	ldr	r3, [pc, #344]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4953      	ldr	r1, [pc, #332]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d010      	beq.n	800252a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	4b4d      	ldr	r3, [pc, #308]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	429a      	cmp	r2, r3
 8002516:	d908      	bls.n	800252a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002518:	4b4a      	ldr	r3, [pc, #296]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f023 020f 	bic.w	r2, r3, #15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4947      	ldr	r1, [pc, #284]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002526:	4313      	orrs	r3, r2
 8002528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d055      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002536:	4b43      	ldr	r3, [pc, #268]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4940      	ldr	r1, [pc, #256]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002544:	4313      	orrs	r3, r2
 8002546:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d107      	bne.n	8002560 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002550:	4b3c      	ldr	r3, [pc, #240]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d121      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0f6      	b.n	800274e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d107      	bne.n	8002578 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002568:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d115      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0ea      	b.n	800274e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d107      	bne.n	8002590 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002580:	4b30      	ldr	r3, [pc, #192]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0de      	b.n	800274e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002590:	4b2c      	ldr	r3, [pc, #176]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0d6      	b.n	800274e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a0:	4b28      	ldr	r3, [pc, #160]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f023 0207 	bic.w	r2, r3, #7
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4925      	ldr	r1, [pc, #148]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b2:	f7fe f9f5 	bl	80009a0 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ba:	f7fe f9f1 	bl	80009a0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0be      	b.n	800274e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	429a      	cmp	r2, r3
 80025e0:	d1eb      	bne.n	80025ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d010      	beq.n	8002610 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d208      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fe:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f023 020f 	bic.w	r2, r3, #15
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	490e      	ldr	r1, [pc, #56]	@ (8002644 <HAL_RCC_ClockConfig+0x244>)
 800260c:	4313      	orrs	r3, r2
 800260e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_RCC_ClockConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d214      	bcs.n	8002648 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_RCC_ClockConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 020f 	bic.w	r2, r3, #15
 8002626:	4906      	ldr	r1, [pc, #24]	@ (8002640 <HAL_RCC_ClockConfig+0x240>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <HAL_RCC_ClockConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e086      	b.n	800274e <HAL_RCC_ClockConfig+0x34e>
 8002640:	52002000 	.word	0x52002000
 8002644:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d010      	beq.n	8002676 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	4b3f      	ldr	r3, [pc, #252]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002660:	429a      	cmp	r2, r3
 8002662:	d208      	bcs.n	8002676 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002664:	4b3c      	ldr	r3, [pc, #240]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	4939      	ldr	r1, [pc, #228]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 8002672:	4313      	orrs	r3, r2
 8002674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d010      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	4b34      	ldr	r3, [pc, #208]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800268e:	429a      	cmp	r2, r3
 8002690:	d208      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002692:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	492e      	ldr	r1, [pc, #184]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026bc:	429a      	cmp	r2, r3
 80026be:	d208      	bcs.n	80026d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026c0:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4922      	ldr	r1, [pc, #136]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d010      	beq.n	8002700 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d208      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4917      	ldr	r1, [pc, #92]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002700:	f000 f834 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	4912      	ldr	r1, [pc, #72]	@ (800275c <HAL_RCC_ClockConfig+0x35c>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
 800271c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <HAL_RCC_ClockConfig+0x358>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <HAL_RCC_ClockConfig+0x35c>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
 8002734:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <HAL_RCC_ClockConfig+0x360>)
 8002736:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002738:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <HAL_RCC_ClockConfig+0x364>)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <HAL_RCC_ClockConfig+0x368>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe f8e2 	bl	800090c <HAL_InitTick>
 8002748:	4603      	mov	r3, r0
 800274a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	58024400 	.word	0x58024400
 800275c:	08004318 	.word	0x08004318
 8002760:	24000004 	.word	0x24000004
 8002764:	24000000 	.word	0x24000000
 8002768:	24000008 	.word	0x24000008

0800276c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002772:	4bb3      	ldr	r3, [pc, #716]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800277a:	2b18      	cmp	r3, #24
 800277c:	f200 8155 	bhi.w	8002a2a <HAL_RCC_GetSysClockFreq+0x2be>
 8002780:	a201      	add	r2, pc, #4	@ (adr r2, 8002788 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	080027ed 	.word	0x080027ed
 800278c:	08002a2b 	.word	0x08002a2b
 8002790:	08002a2b 	.word	0x08002a2b
 8002794:	08002a2b 	.word	0x08002a2b
 8002798:	08002a2b 	.word	0x08002a2b
 800279c:	08002a2b 	.word	0x08002a2b
 80027a0:	08002a2b 	.word	0x08002a2b
 80027a4:	08002a2b 	.word	0x08002a2b
 80027a8:	08002813 	.word	0x08002813
 80027ac:	08002a2b 	.word	0x08002a2b
 80027b0:	08002a2b 	.word	0x08002a2b
 80027b4:	08002a2b 	.word	0x08002a2b
 80027b8:	08002a2b 	.word	0x08002a2b
 80027bc:	08002a2b 	.word	0x08002a2b
 80027c0:	08002a2b 	.word	0x08002a2b
 80027c4:	08002a2b 	.word	0x08002a2b
 80027c8:	08002819 	.word	0x08002819
 80027cc:	08002a2b 	.word	0x08002a2b
 80027d0:	08002a2b 	.word	0x08002a2b
 80027d4:	08002a2b 	.word	0x08002a2b
 80027d8:	08002a2b 	.word	0x08002a2b
 80027dc:	08002a2b 	.word	0x08002a2b
 80027e0:	08002a2b 	.word	0x08002a2b
 80027e4:	08002a2b 	.word	0x08002a2b
 80027e8:	0800281f 	.word	0x0800281f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027ec:	4b94      	ldr	r3, [pc, #592]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027f8:	4b91      	ldr	r3, [pc, #580]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	4a90      	ldr	r2, [pc, #576]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800280a:	e111      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800280c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800280e:	61bb      	str	r3, [r7, #24]
      break;
 8002810:	e10e      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002812:	4b8d      	ldr	r3, [pc, #564]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002814:	61bb      	str	r3, [r7, #24]
      break;
 8002816:	e10b      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002818:	4b8c      	ldr	r3, [pc, #560]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800281a:	61bb      	str	r3, [r7, #24]
      break;
 800281c:	e108      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800281e:	4b88      	ldr	r3, [pc, #544]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002828:	4b85      	ldr	r3, [pc, #532]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002832:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002834:	4b82      	ldr	r3, [pc, #520]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800283e:	4b80      	ldr	r3, [pc, #512]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002842:	08db      	lsrs	r3, r3, #3
 8002844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002856:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80e1 	beq.w	8002a24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b02      	cmp	r3, #2
 8002866:	f000 8083 	beq.w	8002970 <HAL_RCC_GetSysClockFreq+0x204>
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b02      	cmp	r3, #2
 800286e:	f200 80a1 	bhi.w	80029b4 <HAL_RCC_GetSysClockFreq+0x248>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x114>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d056      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x1c0>
 800287e:	e099      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002880:	4b6f      	ldr	r3, [pc, #444]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d02d      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800288c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	08db      	lsrs	r3, r3, #3
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	4a6b      	ldr	r2, [pc, #428]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b6:	4b62      	ldr	r3, [pc, #392]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028be:	ee07 3a90 	vmov	s15, r3
 80028c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80028e6:	e087      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a54 <HAL_RCC_GetSysClockFreq+0x2e8>
 80028f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028fa:	4b51      	ldr	r3, [pc, #324]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800290a:	ed97 6a02 	vldr	s12, [r7, #8]
 800290e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800291a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800291e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800292a:	e065      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002936:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800293a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800293e:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800294e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002952:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800295a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800295e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800296e:	e043      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800297e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002982:	4b2f      	ldr	r3, [pc, #188]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002992:	ed97 6a02 	vldr	s12, [r7, #8]
 8002996:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800299a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800299e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029b2:	e021      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a58 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	0a5b      	lsrs	r3, r3, #9
 80029fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a02:	3301      	adds	r3, #1
 8002a04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1c:	ee17 3a90 	vmov	r3, s15
 8002a20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a22:	e005      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
      break;
 8002a28:	e002      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a2c:	61bb      	str	r3, [r7, #24]
      break;
 8002a2e:	bf00      	nop
  }

  return sysclockfreq;
 8002a30:	69bb      	ldr	r3, [r7, #24]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	@ 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	58024400 	.word	0x58024400
 8002a44:	03d09000 	.word	0x03d09000
 8002a48:	003d0900 	.word	0x003d0900
 8002a4c:	017d7840 	.word	0x017d7840
 8002a50:	46000000 	.word	0x46000000
 8002a54:	4c742400 	.word	0x4c742400
 8002a58:	4a742400 	.word	0x4a742400
 8002a5c:	4bbebc20 	.word	0x4bbebc20

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a64:	b0c6      	sub	sp, #280	@ 0x118
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002a84:	2500      	movs	r5, #0
 8002a86:	ea54 0305 	orrs.w	r3, r4, r5
 8002a8a:	d049      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a96:	d02f      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a9c:	d828      	bhi.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aa2:	d01a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002aa4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aa8:	d822      	bhi.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ab2:	d007      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ab4:	e01c      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab6:	4bab      	ldr	r3, [pc, #684]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aba:	4aaa      	ldr	r2, [pc, #680]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ac2:	e01a      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ac8:	3308      	adds	r3, #8
 8002aca:	2102      	movs	r1, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 f967 	bl	8003da0 <RCCEx_PLL2_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ad8:	e00f      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ade:	3328      	adds	r3, #40	@ 0x28
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 fa0e 	bl	8003f04 <RCCEx_PLL3_Config>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002aee:	e004      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002af6:	e000      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002afa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b02:	4b98      	ldr	r3, [pc, #608]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b10:	4a94      	ldr	r2, [pc, #592]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b12:	430b      	orrs	r3, r1
 8002b14:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b16:	e003      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002b2c:	f04f 0900 	mov.w	r9, #0
 8002b30:	ea58 0309 	orrs.w	r3, r8, r9
 8002b34:	d047      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d82a      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002b40:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b5d 	.word	0x08002b5d
 8002b4c:	08002b6b 	.word	0x08002b6b
 8002b50:	08002b81 	.word	0x08002b81
 8002b54:	08002b9f 	.word	0x08002b9f
 8002b58:	08002b9f 	.word	0x08002b9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b5c:	4b81      	ldr	r3, [pc, #516]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	4a80      	ldr	r2, [pc, #512]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b68:	e01a      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b6e:	3308      	adds	r3, #8
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 f914 	bl	8003da0 <RCCEx_PLL2_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b7e:	e00f      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002b84:	3328      	adds	r3, #40	@ 0x28
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 f9bb 	bl	8003f04 <RCCEx_PLL3_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b94:	e004      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba8:	4b6e      	ldr	r3, [pc, #440]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bac:	f023 0107 	bic.w	r1, r3, #7
 8002bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb6:	4a6b      	ldr	r2, [pc, #428]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bbc:	e003      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002bd2:	f04f 0b00 	mov.w	fp, #0
 8002bd6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002bda:	d05b      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002be4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002be8:	d03b      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002bea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002bee:	d834      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002bf0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bf4:	d037      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002bf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bfa:	d82e      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002bfc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c00:	d033      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002c02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c06:	d828      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c0c:	d01a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c12:	d822      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002c18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c1c:	d007      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002c1e:	e01c      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c20:	4b50      	ldr	r3, [pc, #320]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	4a4f      	ldr	r2, [pc, #316]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c2c:	e01e      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c32:	3308      	adds	r3, #8
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 f8b2 	bl	8003da0 <RCCEx_PLL2_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c42:	e013      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c48:	3328      	adds	r3, #40	@ 0x28
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f959 	bl	8003f04 <RCCEx_PLL3_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c58:	e008      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c60:	e004      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002c62:	bf00      	nop
 8002c64:	e002      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002c66:	bf00      	nop
 8002c68:	e000      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c74:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c78:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c84:	4a37      	ldr	r2, [pc, #220]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c86:	430b      	orrs	r3, r1
 8002c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c8a:	e003      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002caa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	d05d      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002cbc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002cc0:	d03b      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002cc2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002cc6:	d834      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002cc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ccc:	d037      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002cce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cd2:	d82e      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002cd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cd8:	d033      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002cda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cde:	d828      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ce0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ce4:	d01a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cea:	d822      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf4:	d007      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002cf6:	e01c      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	4a19      	ldr	r2, [pc, #100]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d04:	e01e      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 f846 	bl	8003da0 <RCCEx_PLL2_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d1a:	e013      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d20:	3328      	adds	r3, #40	@ 0x28
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 f8ed 	bl	8003f04 <RCCEx_PLL3_Config>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d30:	e008      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002d38:	e004      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002d3a:	bf00      	nop
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10d      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d4c:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d5c:	4a01      	ldr	r2, [pc, #4]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d62:	e005      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002d86:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	d03a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d96:	2b30      	cmp	r3, #48	@ 0x30
 8002d98:	d01f      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002d9a:	2b30      	cmp	r3, #48	@ 0x30
 8002d9c:	d819      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d00c      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d815      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d111      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dae:	4baa      	ldr	r3, [pc, #680]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	4aa9      	ldr	r2, [pc, #676]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002dba:	e011      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 ffeb 	bl	8003da0 <RCCEx_PLL2_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002dd0:	e006      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002dd8:	e002      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002de8:	4b9b      	ldr	r3, [pc, #620]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	4a98      	ldr	r2, [pc, #608]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dfc:	e003      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002e1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e20:	460b      	mov	r3, r1
 8002e22:	4313      	orrs	r3, r2
 8002e24:	d051      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e30:	d035      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e36:	d82e      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002e38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e3c:	d031      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002e3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e42:	d828      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e48:	d01a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4e:	d822      	bhi.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e58:	d007      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002e5a:	e01c      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	4a7d      	ldr	r2, [pc, #500]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e6e:	3308      	adds	r3, #8
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 ff94 	bl	8003da0 <RCCEx_PLL2_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e7e:	e011      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e84:	3328      	adds	r3, #40	@ 0x28
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f001 f83b 	bl	8003f04 <RCCEx_PLL3_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e94:	e006      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e9c:	e002      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002eac:	4b6a      	ldr	r3, [pc, #424]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	4a67      	ldr	r2, [pc, #412]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ec0:	e003      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ec6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002ed6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ee0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	d053      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef4:	d033      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8002ef6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002efa:	d82c      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002efc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f00:	d02f      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002f02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f06:	d826      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002f08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f0c:	d02b      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002f0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f12:	d820      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002f14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f18:	d012      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f1e:	d81a      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d022      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f28:	d115      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f2e:	3308      	adds	r3, #8
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 ff34 	bl	8003da0 <RCCEx_PLL2_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f3e:	e015      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f44:	3328      	adds	r3, #40	@ 0x28
 8002f46:	2101      	movs	r1, #1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 ffdb 	bl	8003f04 <RCCEx_PLL3_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f54:	e00a      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f5c:	e006      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f74:	4b38      	ldr	r3, [pc, #224]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f82:	4a35      	ldr	r2, [pc, #212]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f88:	e003      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002fa8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fac:	460b      	mov	r3, r1
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	d058      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fbe:	d033      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fc4:	d82c      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fca:	d02f      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd0:	d826      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002fd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fd6:	d02b      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002fd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fdc:	d820      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe2:	d012      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fe8:	d81a      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d022      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ff2:	d115      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fecf 	bl	8003da0 <RCCEx_PLL2_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003008:	e015      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800300a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800300e:	3328      	adds	r3, #40	@ 0x28
 8003010:	2101      	movs	r1, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f000 ff76 	bl	8003f04 <RCCEx_PLL3_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800301e:	e00a      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003026:	e006      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003028:	bf00      	nop
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800302c:	bf00      	nop
 800302e:	e002      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003030:	bf00      	nop
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10e      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800304a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800304e:	4a02      	ldr	r2, [pc, #8]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003050:	430b      	orrs	r3, r1
 8003052:	6593      	str	r3, [r2, #88]	@ 0x58
 8003054:	e006      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003056:	bf00      	nop
 8003058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003060:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800307a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800307e:	460b      	mov	r3, r1
 8003080:	4313      	orrs	r3, r2
 8003082:	d037      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800308a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800308e:	d00e      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003094:	d816      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d018      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800309a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800309e:	d111      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a0:	4bc4      	ldr	r3, [pc, #784]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	4ac3      	ldr	r2, [pc, #780]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030ac:	e00f      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030b2:	3308      	adds	r3, #8
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fe72 	bl	8003da0 <RCCEx_PLL2_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030c2:	e004      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80030cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030d6:	4bb7      	ldr	r3, [pc, #732]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80030de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e4:	4ab3      	ldr	r2, [pc, #716]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80030ea:	e003      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003100:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800310a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800310e:	460b      	mov	r3, r1
 8003110:	4313      	orrs	r3, r2
 8003112:	d039      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311a:	2b03      	cmp	r3, #3
 800311c:	d81c      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800311e:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003161 	.word	0x08003161
 8003128:	08003135 	.word	0x08003135
 800312c:	08003143 	.word	0x08003143
 8003130:	08003161 	.word	0x08003161
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003134:	4b9f      	ldr	r3, [pc, #636]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	4a9e      	ldr	r2, [pc, #632]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800313a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003140:	e00f      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003146:	3308      	adds	r3, #8
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fe28 	bl	8003da0 <RCCEx_PLL2_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003156:	e004      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800316a:	4b92      	ldr	r3, [pc, #584]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316e:	f023 0103 	bic.w	r1, r3, #3
 8003172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003178:	4a8e      	ldr	r2, [pc, #568]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800317a:	430b      	orrs	r3, r1
 800317c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800317e:	e003      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003194:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800319e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f000 8099 	beq.w	80032dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031aa:	4b83      	ldr	r3, [pc, #524]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a82      	ldr	r2, [pc, #520]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031b6:	f7fd fbf3 	bl	80009a0 <HAL_GetTick>
 80031ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031be:	e00b      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c0:	f7fd fbee 	bl	80009a0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b64      	cmp	r3, #100	@ 0x64
 80031ce:	d903      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031d6:	e005      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031d8:	4b77      	ldr	r3, [pc, #476]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0ed      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80031e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d173      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031ec:	4b71      	ldr	r3, [pc, #452]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031f8:	4053      	eors	r3, r2
 80031fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d015      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003202:	4b6c      	ldr	r3, [pc, #432]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800320a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800320e:	4b69      	ldr	r3, [pc, #420]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003212:	4a68      	ldr	r2, [pc, #416]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800321a:	4b66      	ldr	r3, [pc, #408]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321e:	4a65      	ldr	r2, [pc, #404]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003224:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003226:	4a63      	ldr	r2, [pc, #396]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800322c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800322e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003232:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323a:	d118      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fd fbb0 	bl	80009a0 <HAL_GetTick>
 8003240:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003244:	e00d      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fd fbab 	bl	80009a0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003250:	1ad2      	subs	r2, r2, r3
 8003252:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003256:	429a      	cmp	r2, r3
 8003258:	d903      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003260:	e005      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003262:	4b54      	ldr	r3, [pc, #336]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0eb      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800326e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003272:	2b00      	cmp	r3, #0
 8003274:	d129      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800327a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800327e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003286:	d10e      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003288:	4b4a      	ldr	r3, [pc, #296]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003298:	091a      	lsrs	r2, r3, #4
 800329a:	4b48      	ldr	r3, [pc, #288]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800329c:	4013      	ands	r3, r2
 800329e:	4a45      	ldr	r2, [pc, #276]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6113      	str	r3, [r2, #16]
 80032a4:	e005      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80032a6:	4b43      	ldr	r3, [pc, #268]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	4a42      	ldr	r2, [pc, #264]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032b0:	6113      	str	r3, [r2, #16]
 80032b2:	4b40      	ldr	r3, [pc, #256]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80032b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80032be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c2:	4a3c      	ldr	r2, [pc, #240]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c8:	e008      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80032d2:	e003      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80032dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	f002 0301 	and.w	r3, r2, #1
 80032e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80032f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80032f6:	460b      	mov	r3, r1
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f000 808f 	beq.w	800341c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80032fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003304:	2b28      	cmp	r3, #40	@ 0x28
 8003306:	d871      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003308:	a201      	add	r2, pc, #4	@ (adr r2, 8003310 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	080033f5 	.word	0x080033f5
 8003314:	080033ed 	.word	0x080033ed
 8003318:	080033ed 	.word	0x080033ed
 800331c:	080033ed 	.word	0x080033ed
 8003320:	080033ed 	.word	0x080033ed
 8003324:	080033ed 	.word	0x080033ed
 8003328:	080033ed 	.word	0x080033ed
 800332c:	080033ed 	.word	0x080033ed
 8003330:	080033c1 	.word	0x080033c1
 8003334:	080033ed 	.word	0x080033ed
 8003338:	080033ed 	.word	0x080033ed
 800333c:	080033ed 	.word	0x080033ed
 8003340:	080033ed 	.word	0x080033ed
 8003344:	080033ed 	.word	0x080033ed
 8003348:	080033ed 	.word	0x080033ed
 800334c:	080033ed 	.word	0x080033ed
 8003350:	080033d7 	.word	0x080033d7
 8003354:	080033ed 	.word	0x080033ed
 8003358:	080033ed 	.word	0x080033ed
 800335c:	080033ed 	.word	0x080033ed
 8003360:	080033ed 	.word	0x080033ed
 8003364:	080033ed 	.word	0x080033ed
 8003368:	080033ed 	.word	0x080033ed
 800336c:	080033ed 	.word	0x080033ed
 8003370:	080033f5 	.word	0x080033f5
 8003374:	080033ed 	.word	0x080033ed
 8003378:	080033ed 	.word	0x080033ed
 800337c:	080033ed 	.word	0x080033ed
 8003380:	080033ed 	.word	0x080033ed
 8003384:	080033ed 	.word	0x080033ed
 8003388:	080033ed 	.word	0x080033ed
 800338c:	080033ed 	.word	0x080033ed
 8003390:	080033f5 	.word	0x080033f5
 8003394:	080033ed 	.word	0x080033ed
 8003398:	080033ed 	.word	0x080033ed
 800339c:	080033ed 	.word	0x080033ed
 80033a0:	080033ed 	.word	0x080033ed
 80033a4:	080033ed 	.word	0x080033ed
 80033a8:	080033ed 	.word	0x080033ed
 80033ac:	080033ed 	.word	0x080033ed
 80033b0:	080033f5 	.word	0x080033f5
 80033b4:	58024400 	.word	0x58024400
 80033b8:	58024800 	.word	0x58024800
 80033bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c4:	3308      	adds	r3, #8
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fce9 	bl	8003da0 <RCCEx_PLL2_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033d4:	e00f      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033da:	3328      	adds	r3, #40	@ 0x28
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fd90 	bl	8003f04 <RCCEx_PLL3_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033ea:	e004      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033f2:	e000      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80033f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80033fe:	4bbf      	ldr	r3, [pc, #764]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003402:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800340c:	4abb      	ldr	r2, [pc, #748]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800340e:	430b      	orrs	r3, r1
 8003410:	6553      	str	r3, [r2, #84]	@ 0x54
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f002 0302 	and.w	r3, r2, #2
 8003428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003432:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003436:	460b      	mov	r3, r1
 8003438:	4313      	orrs	r3, r2
 800343a:	d041      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800343c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003442:	2b05      	cmp	r3, #5
 8003444:	d824      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003446:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344c:	08003499 	.word	0x08003499
 8003450:	08003465 	.word	0x08003465
 8003454:	0800347b 	.word	0x0800347b
 8003458:	08003499 	.word	0x08003499
 800345c:	08003499 	.word	0x08003499
 8003460:	08003499 	.word	0x08003499
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003468:	3308      	adds	r3, #8
 800346a:	2101      	movs	r1, #1
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fc97 	bl	8003da0 <RCCEx_PLL2_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003478:	e00f      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800347a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347e:	3328      	adds	r3, #40	@ 0x28
 8003480:	2101      	movs	r1, #1
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fd3e 	bl	8003f04 <RCCEx_PLL3_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800348e:	e004      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003496:	e000      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034a2:	4b96      	ldr	r3, [pc, #600]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80034a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a6:	f023 0107 	bic.w	r1, r3, #7
 80034aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b0:	4a92      	ldr	r2, [pc, #584]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80034b6:	e003      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f002 0304 	and.w	r3, r2, #4
 80034cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d044      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80034e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d825      	bhi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80034ec:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	08003541 	.word	0x08003541
 80034f8:	0800350d 	.word	0x0800350d
 80034fc:	08003523 	.word	0x08003523
 8003500:	08003541 	.word	0x08003541
 8003504:	08003541 	.word	0x08003541
 8003508:	08003541 	.word	0x08003541
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800350c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003510:	3308      	adds	r3, #8
 8003512:	2101      	movs	r1, #1
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fc43 	bl	8003da0 <RCCEx_PLL2_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003520:	e00f      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003526:	3328      	adds	r3, #40	@ 0x28
 8003528:	2101      	movs	r1, #1
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fcea 	bl	8003f04 <RCCEx_PLL3_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003536:	e004      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800353e:	e000      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800354a:	4b6c      	ldr	r3, [pc, #432]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354e:	f023 0107 	bic.w	r1, r3, #7
 8003552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	4a68      	ldr	r2, [pc, #416]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800355c:	430b      	orrs	r3, r1
 800355e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003566:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800356a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f002 0320 	and.w	r3, r2, #32
 8003576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003580:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003584:	460b      	mov	r3, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	d055      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800358a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003596:	d033      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800359c:	d82c      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a2:	d02f      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a8:	d826      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80035aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035ae:	d02b      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80035b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035b4:	d820      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80035b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ba:	d012      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80035bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035c0:	d81a      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d022      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80035c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035ca:	d115      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d0:	3308      	adds	r3, #8
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fbe3 	bl	8003da0 <RCCEx_PLL2_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035e0:	e015      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e6:	3328      	adds	r3, #40	@ 0x28
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fc8a 	bl	8003f04 <RCCEx_PLL3_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035f6:	e00a      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035fe:	e006      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003600:	bf00      	nop
 8003602:	e004      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003604:	bf00      	nop
 8003606:	e002      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003608:	bf00      	nop
 800360a:	e000      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800360c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003616:	4b39      	ldr	r3, [pc, #228]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800361e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003626:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003628:	430b      	orrs	r3, r1
 800362a:	6553      	str	r3, [r2, #84]	@ 0x54
 800362c:	e003      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003632:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003642:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800364c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003650:	460b      	mov	r3, r1
 8003652:	4313      	orrs	r3, r2
 8003654:	d058      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800365a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800365e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003662:	d033      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003664:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003668:	d82c      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366e:	d02f      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003674:	d826      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003676:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800367a:	d02b      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800367c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003680:	d820      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003686:	d012      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800368c:	d81a      	bhi.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d022      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003696:	d115      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369c:	3308      	adds	r3, #8
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fb7d 	bl	8003da0 <RCCEx_PLL2_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036ac:	e015      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b2:	3328      	adds	r3, #40	@ 0x28
 80036b4:	2102      	movs	r1, #2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fc24 	bl	8003f04 <RCCEx_PLL3_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036c2:	e00a      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036ca:	e006      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80036cc:	bf00      	nop
 80036ce:	e004      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80036d0:	bf00      	nop
 80036d2:	e002      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80036d4:	bf00      	nop
 80036d6:	e000      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80036d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10e      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80036ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036f2:	4a02      	ldr	r2, [pc, #8]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80036fa:	bf00      	nop
 80036fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003704:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800371e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003722:	460b      	mov	r3, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	d055      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003730:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003734:	d033      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003736:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800373a:	d82c      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003740:	d02f      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003742:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003746:	d826      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003748:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800374c:	d02b      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800374e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003752:	d820      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003758:	d012      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800375a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800375e:	d81a      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003768:	d115      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800376a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800376e:	3308      	adds	r3, #8
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fb14 	bl	8003da0 <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800377e:	e015      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003784:	3328      	adds	r3, #40	@ 0x28
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fbbb 	bl	8003f04 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003794:	e00a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800379e:	bf00      	nop
 80037a0:	e004      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80037a2:	bf00      	nop
 80037a4:	e002      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037b4:	4ba0      	ldr	r3, [pc, #640]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80037bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037c4:	4a9c      	ldr	r2, [pc, #624]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80037d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f002 0308 	and.w	r3, r2, #8
 80037e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80037ee:	460b      	mov	r3, r1
 80037f0:	4313      	orrs	r3, r2
 80037f2:	d01e      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80037f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003806:	3328      	adds	r3, #40	@ 0x28
 8003808:	2102      	movs	r1, #2
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fb7a 	bl	8003f04 <RCCEx_PLL3_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800381c:	4b86      	ldr	r3, [pc, #536]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800381e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003820:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800382c:	4a82      	ldr	r2, [pc, #520]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800382e:	430b      	orrs	r3, r1
 8003830:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f002 0310 	and.w	r3, r2, #16
 800383e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003848:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800384c:	460b      	mov	r3, r1
 800384e:	4313      	orrs	r3, r2
 8003850:	d01e      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800385e:	d10c      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003864:	3328      	adds	r3, #40	@ 0x28
 8003866:	2102      	movs	r1, #2
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fb4b 	bl	8003f04 <RCCEx_PLL3_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800387a:	4b6f      	ldr	r3, [pc, #444]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800388a:	4a6b      	ldr	r2, [pc, #428]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800388c:	430b      	orrs	r3, r1
 800388e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800389c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800389e:	2300      	movs	r3, #0
 80038a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	d03e      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80038ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038b8:	d022      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80038ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038be:	d81b      	bhi.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80038ca:	e015      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d0:	3308      	adds	r3, #8
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fa63 	bl	8003da0 <RCCEx_PLL2_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038e0:	e00f      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e6:	3328      	adds	r3, #40	@ 0x28
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fb0a 	bl	8003f04 <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038f6:	e004      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800390a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800391a:	4a47      	ldr	r2, [pc, #284]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003926:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800392a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003936:	673b      	str	r3, [r7, #112]	@ 0x70
 8003938:	2300      	movs	r3, #0
 800393a:	677b      	str	r3, [r7, #116]	@ 0x74
 800393c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003940:	460b      	mov	r3, r1
 8003942:	4313      	orrs	r3, r2
 8003944:	d03b      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800394a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800394e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003952:	d01f      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003954:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003958:	d818      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800395a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800395e:	d003      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003960:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003964:	d007      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003966:	e011      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4b33      	ldr	r3, [pc, #204]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	4a32      	ldr	r2, [pc, #200]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003974:	e00f      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397a:	3328      	adds	r3, #40	@ 0x28
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fac0 	bl	8003f04 <RCCEx_PLL3_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800398a:	e004      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800399e:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ae:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80039b4:	e003      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80039ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039cc:	2300      	movs	r3, #0
 80039ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80039d4:	460b      	mov	r3, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	d034      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e8:	d007      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ec:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	4a11      	ldr	r2, [pc, #68]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039f8:	e00e      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fe:	3308      	adds	r3, #8
 8003a00:	2102      	movs	r1, #2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f9cc 	bl	8003da0 <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10d      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2e:	4a02      	ldr	r2, [pc, #8]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a30:	430b      	orrs	r3, r1
 8003a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a34:	e006      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003a36:	bf00      	nop
 8003a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a52:	2300      	movs	r3, #0
 8003a54:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a56:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	d00c      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a64:	3328      	adds	r3, #40	@ 0x28
 8003a66:	2102      	movs	r1, #2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fa4b 	bl	8003f04 <RCCEx_PLL3_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003a86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a88:	2300      	movs	r3, #0
 8003a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a8c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d036      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa0:	d018      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa6:	d811      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aac:	d014      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab2:	d80b      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d011      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abc:	d106      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003abe:	4bb7      	ldr	r3, [pc, #732]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	4ab6      	ldr	r2, [pc, #728]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003aca:	e008      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ad2:	e004      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ad4:	bf00      	nop
 8003ad6:	e002      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ade:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ae6:	4bad      	ldr	r3, [pc, #692]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003af4:	4aa9      	ldr	r2, [pc, #676]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003af6:	430b      	orrs	r3, r1
 8003af8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003afa:	e003      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b12:	2300      	movs	r3, #0
 8003b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b20:	4b9e      	ldr	r3, [pc, #632]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	4a9b      	ldr	r2, [pc, #620]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b42:	2300      	movs	r3, #0
 8003b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b50:	4b92      	ldr	r3, [pc, #584]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b5e:	4a8f      	ldr	r2, [pc, #572]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b72:	2300      	movs	r3, #0
 8003b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b80:	4b86      	ldr	r3, [pc, #536]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	4a85      	ldr	r2, [pc, #532]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b8a:	6113      	str	r3, [r2, #16]
 8003b8c:	4b83      	ldr	r3, [pc, #524]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b8e:	6919      	ldr	r1, [r3, #16]
 8003b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b98:	4a80      	ldr	r2, [pc, #512]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bac:	2300      	movs	r3, #0
 8003bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bb0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	d009      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bba:	4b78      	ldr	r3, [pc, #480]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	4a74      	ldr	r2, [pc, #464]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bdc:	2300      	movs	r3, #0
 8003bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003be4:	460b      	mov	r3, r1
 8003be6:	4313      	orrs	r3, r2
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bea:	4b6c      	ldr	r3, [pc, #432]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfa:	4a68      	ldr	r2, [pc, #416]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	2100      	movs	r1, #0
 8003c0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c12:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d011      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c20:	3308      	adds	r3, #8
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f8bb 	bl	8003da0 <RCCEx_PLL2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003c30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	2100      	movs	r1, #0
 8003c4a:	6239      	str	r1, [r7, #32]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	d011      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c60:	3308      	adds	r3, #8
 8003c62:	2101      	movs	r1, #1
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f89b 	bl	8003da0 <RCCEx_PLL2_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003c70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	61b9      	str	r1, [r7, #24]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c96:	460b      	mov	r3, r1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	d011      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 f87b 	bl	8003da0 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	2100      	movs	r1, #0
 8003cca:	6139      	str	r1, [r7, #16]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	d011      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce0:	3328      	adds	r3, #40	@ 0x28
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 f90d 	bl	8003f04 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	2100      	movs	r1, #0
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d16:	460b      	mov	r3, r1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	d011      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d20:	3328      	adds	r3, #40	@ 0x28
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 f8ed 	bl	8003f04 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	2100      	movs	r1, #0
 8003d4a:	6039      	str	r1, [r7, #0]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d56:	460b      	mov	r3, r1
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	d011      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d60:	3328      	adds	r3, #40	@ 0x28
 8003d62:	2102      	movs	r1, #2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f8cd 	bl	8003f04 <RCCEx_PLL3_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003d80:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9a:	bf00      	nop
 8003d9c:	58024400 	.word	0x58024400

08003da0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dae:	4b53      	ldr	r3, [pc, #332]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d101      	bne.n	8003dbe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e099      	b.n	8003ef2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003dc4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dca:	f7fc fde9 	bl	80009a0 <HAL_GetTick>
 8003dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dd2:	f7fc fde5 	bl	80009a0 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e086      	b.n	8003ef2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003de4:	4b45      	ldr	r3, [pc, #276]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003df0:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	031b      	lsls	r3, r3, #12
 8003dfe:	493f      	ldr	r1, [pc, #252]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	025b      	lsls	r3, r3, #9
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	041b      	lsls	r3, r3, #16
 8003e22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	061b      	lsls	r3, r3, #24
 8003e30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e34:	4931      	ldr	r1, [pc, #196]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e3a:	4b30      	ldr	r3, [pc, #192]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	492d      	ldr	r1, [pc, #180]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	f023 0220 	bic.w	r2, r3, #32
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4928      	ldr	r1, [pc, #160]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e5e:	4b27      	ldr	r3, [pc, #156]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	4a26      	ldr	r2, [pc, #152]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e64:	f023 0310 	bic.w	r3, r3, #16
 8003e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e6a:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e6e:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <RCCEx_PLL2_Config+0x160>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	69d2      	ldr	r2, [r2, #28]
 8003e76:	00d2      	lsls	r2, r2, #3
 8003e78:	4920      	ldr	r1, [pc, #128]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e84:	f043 0310 	orr.w	r3, r3, #16
 8003e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e90:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003e96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e9c:	e00f      	b.n	8003ebe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ea4:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	4a14      	ldr	r2, [pc, #80]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003eb0:	e005      	b.n	8003ebe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003eb2:	4b12      	ldr	r3, [pc, #72]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4a11      	ldr	r2, [pc, #68]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003eb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003ec4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eca:	f7fc fd69 	bl	80009a0 <HAL_GetTick>
 8003ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ed0:	e008      	b.n	8003ee4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ed2:	f7fc fd65 	bl	80009a0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e006      	b.n	8003ef2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <RCCEx_PLL2_Config+0x15c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400
 8003f00:	ffff0007 	.word	0xffff0007

08003f04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f12:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d101      	bne.n	8003f22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e099      	b.n	8004056 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f22:	4b4f      	ldr	r3, [pc, #316]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a4e      	ldr	r2, [pc, #312]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2e:	f7fc fd37 	bl	80009a0 <HAL_GetTick>
 8003f32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f34:	e008      	b.n	8003f48 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f36:	f7fc fd33 	bl	80009a0 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e086      	b.n	8004056 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f48:	4b45      	ldr	r3, [pc, #276]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f54:	4b42      	ldr	r3, [pc, #264]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	051b      	lsls	r3, r3, #20
 8003f62:	493f      	ldr	r1, [pc, #252]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	025b      	lsls	r3, r3, #9
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f98:	4931      	ldr	r1, [pc, #196]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f9e:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	492d      	ldr	r1, [pc, #180]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4928      	ldr	r1, [pc, #160]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fc2:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003fce:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fd2:	4b24      	ldr	r3, [pc, #144]	@ (8004064 <RCCEx_PLL3_Config+0x160>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	69d2      	ldr	r2, [r2, #28]
 8003fda:	00d2      	lsls	r2, r2, #3
 8003fdc:	4920      	ldr	r1, [pc, #128]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8003ffa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004000:	e00f      	b.n	8004022 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d106      	bne.n	8004016 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004008:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	4a14      	ldr	r2, [pc, #80]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 800400e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004012:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004014:	e005      	b.n	8004022 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004016:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	4a11      	ldr	r2, [pc, #68]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 800401c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004020:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004022:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a0e      	ldr	r2, [pc, #56]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402e:	f7fc fcb7 	bl	80009a0 <HAL_GetTick>
 8004032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004034:	e008      	b.n	8004048 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004036:	f7fc fcb3 	bl	80009a0 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e006      	b.n	8004056 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <RCCEx_PLL3_Config+0x15c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004054:	7bfb      	ldrb	r3, [r7, #15]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	58024400 	.word	0x58024400
 8004064:	ffff0007 	.word	0xffff0007

08004068 <calculate_crc>:
#include "driver_sht4x.h"
#include <string.h>

static uint8_t calculate_crc(uint8_t *data, uint16_t len)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	807b      	strh	r3, [r7, #2]
    const uint8_t POLYNOMIAL = 0x31;  /* Polynomial for CRC-8 calculation */
 8004074:	2331      	movs	r3, #49	@ 0x31
 8004076:	72bb      	strb	r3, [r7, #10]
    uint8_t crc = 0xFF;               /* Initial value for CRC */
 8004078:	23ff      	movs	r3, #255	@ 0xff
 800407a:	73fb      	strb	r3, [r7, #15]
  
    for (uint16_t j = 0; j < len; j++)  /* Loop through each byte in the data */
 800407c:	2300      	movs	r3, #0
 800407e:	81bb      	strh	r3, [r7, #12]
 8004080:	e022      	b.n	80040c8 <calculate_crc+0x60>
    {
        crc ^= data[j];                /* XOR current data byte with CRC */
 8004082:	89bb      	ldrh	r3, [r7, #12]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	4053      	eors	r3, r2
 800408e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) /* Process 8 bits of each byte */
 8004090:	2300      	movs	r3, #0
 8004092:	72fb      	strb	r3, [r7, #11]
 8004094:	e012      	b.n	80040bc <calculate_crc+0x54>
        {
            if (crc & 0x80)            /* If the MSB is 1 */
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	da08      	bge.n	80040b0 <calculate_crc+0x48>
            {
                crc = (crc << 1) ^ POLYNOMIAL; /* Shift left and XOR with polynomial */
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	b25a      	sxtb	r2, r3
 80040a4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80040a8:	4053      	eors	r3, r2
 80040aa:	b25b      	sxtb	r3, r3
 80040ac:	73fb      	strb	r3, [r7, #15]
 80040ae:	e002      	b.n	80040b6 <calculate_crc+0x4e>
            }
            else
            {
                crc <<= 1;             /* Just shift left if MSB is 0 */
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
        for (uint8_t i = 0; i < 8; i++) /* Process 8 bits of each byte */
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	3301      	adds	r3, #1
 80040ba:	72fb      	strb	r3, [r7, #11]
 80040bc:	7afb      	ldrb	r3, [r7, #11]
 80040be:	2b07      	cmp	r3, #7
 80040c0:	d9e9      	bls.n	8004096 <calculate_crc+0x2e>
    for (uint16_t j = 0; j < len; j++)  /* Loop through each byte in the data */
 80040c2:	89bb      	ldrh	r3, [r7, #12]
 80040c4:	3301      	adds	r3, #1
 80040c6:	81bb      	strh	r3, [r7, #12]
 80040c8:	89ba      	ldrh	r2, [r7, #12]
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d3d8      	bcc.n	8004082 <calculate_crc+0x1a>
            }
        }
    }
  
    return crc;  /* Return the calculated CRC value */
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <sht4x_read>:

uint8_t sht4x_read(sht4x_handle_t *handle, sht4x_mode_t mode, 
                   uint16_t *temperature_raw, float *temperature_s, 
                   uint16_t *humidity_raw, float *humidity_s) 
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	460b      	mov	r3, r1
 80040ee:	72fb      	strb	r3, [r7, #11]
    uint8_t buf[6];
    uint8_t command = (uint8_t)mode;
 80040f0:	7afb      	ldrb	r3, [r7, #11]
 80040f2:	75fb      	strb	r3, [r7, #23]

    if (handle == NULL || handle->i2c_handle == NULL) {
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <sht4x_read+0x22>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <sht4x_read+0x26>
        return 2; /* Error: invalid handle */
 8004102:	2302      	movs	r3, #2
 8004104:	e0c0      	b.n	8004288 <sht4x_read+0x1a8>
    }

    /* Send command to SHT4x */
    if (HAL_I2C_Master_Transmit(handle->i2c_handle, 
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6818      	ldr	r0, [r3, #0]
                                (handle->i2c_address << 1), 
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	791b      	ldrb	r3, [r3, #4]
    if (HAL_I2C_Master_Transmit(handle->i2c_handle, 
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	b299      	uxth	r1, r3
 8004112:	f107 0217 	add.w	r2, r7, #23
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2301      	movs	r3, #1
 800411e:	f7fd f80f 	bl	8001140 <HAL_I2C_Master_Transmit>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <sht4x_read+0x4c>
                                &command, 1, HAL_MAX_DELAY) != HAL_OK) {
        return 1; /* Error: I2C transmission failed */
 8004128:	2301      	movs	r3, #1
 800412a:	e0ad      	b.n	8004288 <sht4x_read+0x1a8>
    }

    /* Wait based on mode's measurement time */
    switch (mode) {
 800412c:	7afb      	ldrb	r3, [r7, #11]
 800412e:	2bfd      	cmp	r3, #253	@ 0xfd
 8004130:	d027      	beq.n	8004182 <sht4x_read+0xa2>
 8004132:	2bfd      	cmp	r3, #253	@ 0xfd
 8004134:	dc35      	bgt.n	80041a2 <sht4x_read+0xc2>
 8004136:	2bf6      	cmp	r3, #246	@ 0xf6
 8004138:	d027      	beq.n	800418a <sht4x_read+0xaa>
 800413a:	2bf6      	cmp	r3, #246	@ 0xf6
 800413c:	dc31      	bgt.n	80041a2 <sht4x_read+0xc2>
 800413e:	2be0      	cmp	r3, #224	@ 0xe0
 8004140:	d027      	beq.n	8004192 <sht4x_read+0xb2>
 8004142:	2be0      	cmp	r3, #224	@ 0xe0
 8004144:	dc2d      	bgt.n	80041a2 <sht4x_read+0xc2>
 8004146:	2b15      	cmp	r3, #21
 8004148:	d027      	beq.n	800419a <sht4x_read+0xba>
 800414a:	2b15      	cmp	r3, #21
 800414c:	db29      	blt.n	80041a2 <sht4x_read+0xc2>
 800414e:	2b39      	cmp	r3, #57	@ 0x39
 8004150:	dc27      	bgt.n	80041a2 <sht4x_read+0xc2>
 8004152:	2b1e      	cmp	r3, #30
 8004154:	db25      	blt.n	80041a2 <sht4x_read+0xc2>
 8004156:	3b1e      	subs	r3, #30
 8004158:	2201      	movs	r2, #1
 800415a:	409a      	lsls	r2, r3
 800415c:	4b4c      	ldr	r3, [pc, #304]	@ (8004290 <sht4x_read+0x1b0>)
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <sht4x_read+0xa2>
 800416e:	4b49      	ldr	r3, [pc, #292]	@ (8004294 <sht4x_read+0x1b4>)
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10c      	bne.n	800419a <sht4x_read+0xba>
 8004180:	e00f      	b.n	80041a2 <sht4x_read+0xc2>
        case SHT4X_MODE_HIGH_PRECISION_WITH_NO_HEATER:
        case SHT4X_MODE_HIGH_PRECISION_WITH_HEATER_200MW_1S:
        case SHT4X_MODE_HIGH_PRECISION_WITH_HEATER_110MW_1S:
        case SHT4X_MODE_HIGH_PRECISION_WITH_HEATER_20MW_1S:
            HAL_Delay(10); /* 10 ms delay */
 8004182:	200a      	movs	r0, #10
 8004184:	f7fc fc18 	bl	80009b8 <HAL_Delay>
            break;
 8004188:	e00d      	b.n	80041a6 <sht4x_read+0xc6>
        case SHT4X_MODE_MEDIUM_PRECISION_WITH_NO_HEATER:
            HAL_Delay(5); /* 5 ms delay */
 800418a:	2005      	movs	r0, #5
 800418c:	f7fc fc14 	bl	80009b8 <HAL_Delay>
            break;
 8004190:	e009      	b.n	80041a6 <sht4x_read+0xc6>
        case SHT4X_MODE_LOWEST_PRECISION_WITH_NO_HEATER:
            HAL_Delay(2); /* 2 ms delay */
 8004192:	2002      	movs	r0, #2
 8004194:	f7fc fc10 	bl	80009b8 <HAL_Delay>
            break;
 8004198:	e005      	b.n	80041a6 <sht4x_read+0xc6>
        case SHT4X_MODE_HIGH_PRECISION_WITH_HEATER_200MW_0P1S:
        case SHT4X_MODE_HIGH_PRECISION_WITH_HEATER_110MW_0P1S:
        case SHT4X_MODE_HIGH_PRECISION_WITH_HEATER_20MW_0P1S:
            HAL_Delay(1); /* 1 ms delay */
 800419a:	2001      	movs	r0, #1
 800419c:	f7fc fc0c 	bl	80009b8 <HAL_Delay>
            break;
 80041a0:	e001      	b.n	80041a6 <sht4x_read+0xc6>
        default:
            return 3; /* Error: invalid mode */
 80041a2:	2303      	movs	r3, #3
 80041a4:	e070      	b.n	8004288 <sht4x_read+0x1a8>
    }

    /* Read measurement data */
    if (HAL_I2C_Master_Receive(handle->i2c_handle, 
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6818      	ldr	r0, [r3, #0]
                               (handle->i2c_address << 1) | 1, 
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	791b      	ldrb	r3, [r3, #4]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	b21b      	sxth	r3, r3
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	b21b      	sxth	r3, r3
    if (HAL_I2C_Master_Receive(handle->i2c_handle, 
 80041b8:	b299      	uxth	r1, r3
 80041ba:	f107 0218 	add.w	r2, r7, #24
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2306      	movs	r3, #6
 80041c6:	f7fd f8d3 	bl	8001370 <HAL_I2C_Master_Receive>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <sht4x_read+0xf4>
                               buf, 6, HAL_MAX_DELAY) != HAL_OK) {
        return 1; /* Error: I2C reception failed */
 80041d0:	2301      	movs	r3, #1
 80041d2:	e059      	b.n	8004288 <sht4x_read+0x1a8>
    }

    if (calculate_crc(buf, 2) != buf[2]) {
 80041d4:	f107 0318 	add.w	r3, r7, #24
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff44 	bl	8004068 <calculate_crc>
 80041e0:	4603      	mov	r3, r0
 80041e2:	461a      	mov	r2, r3
 80041e4:	7ebb      	ldrb	r3, [r7, #26]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d001      	beq.n	80041ee <sht4x_read+0x10e>
        return 4; /* Error: CRC mismatch for temperature */
 80041ea:	2304      	movs	r3, #4
 80041ec:	e04c      	b.n	8004288 <sht4x_read+0x1a8>
    }

    if (calculate_crc(buf + 3, 2) != buf[5]) {
 80041ee:	f107 0318 	add.w	r3, r7, #24
 80041f2:	3303      	adds	r3, #3
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff ff36 	bl	8004068 <calculate_crc>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461a      	mov	r2, r3
 8004200:	7f7b      	ldrb	r3, [r7, #29]
 8004202:	429a      	cmp	r2, r3
 8004204:	d001      	beq.n	800420a <sht4x_read+0x12a>
        return 4; /* Error: CRC mismatch for humidity */
 8004206:	2304      	movs	r3, #4
 8004208:	e03e      	b.n	8004288 <sht4x_read+0x1a8>
    }

    *temperature_raw = ((uint16_t)buf[0] << 8) | buf[1];
 800420a:	7e3b      	ldrb	r3, [r7, #24]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	b21a      	sxth	r2, r3
 8004210:	7e7b      	ldrb	r3, [r7, #25]
 8004212:	b21b      	sxth	r3, r3
 8004214:	4313      	orrs	r3, r2
 8004216:	b21b      	sxth	r3, r3
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	801a      	strh	r2, [r3, #0]
    *humidity_raw = ((uint16_t)buf[3] << 8) | buf[4];
 800421e:	7efb      	ldrb	r3, [r7, #27]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	b21a      	sxth	r2, r3
 8004224:	7f3b      	ldrb	r3, [r7, #28]
 8004226:	b21b      	sxth	r3, r3
 8004228:	4313      	orrs	r3, r2
 800422a:	b21b      	sxth	r3, r3
 800422c:	b29a      	uxth	r2, r3
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	801a      	strh	r2, [r3, #0]

    *temperature_s = (float)(*temperature_raw) / 65535.0f * 175.0f - 45.0f;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800423e:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8004298 <sht4x_read+0x1b8>
 8004242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004246:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800429c <sht4x_read+0x1bc>
 800424a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80042a0 <sht4x_read+0x1c0>
 8004252:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	edc3 7a00 	vstr	s15, [r3]
    *humidity_s = (float)(*humidity_raw) / 65535.0f * 125.0f - 6.0f;
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	ee07 3a90 	vmov	s15, r3
 8004264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004268:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004298 <sht4x_read+0x1b8>
 800426c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004270:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80042a4 <sht4x_read+0x1c4>
 8004274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004278:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800427c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004282:	edc3 7a00 	vstr	s15, [r3]

    return 0; 
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	08020001 	.word	0x08020001
 8004294:	00100040 	.word	0x00100040
 8004298:	477fff00 	.word	0x477fff00
 800429c:	432f0000 	.word	0x432f0000
 80042a0:	42340000 	.word	0x42340000
 80042a4:	42fa0000 	.word	0x42fa0000

080042a8 <memset>:
 80042a8:	4402      	add	r2, r0
 80042aa:	4603      	mov	r3, r0
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d100      	bne.n	80042b2 <memset+0xa>
 80042b0:	4770      	bx	lr
 80042b2:	f803 1b01 	strb.w	r1, [r3], #1
 80042b6:	e7f9      	b.n	80042ac <memset+0x4>

080042b8 <__libc_init_array>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	4d0d      	ldr	r5, [pc, #52]	@ (80042f0 <__libc_init_array+0x38>)
 80042bc:	4c0d      	ldr	r4, [pc, #52]	@ (80042f4 <__libc_init_array+0x3c>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	2600      	movs	r6, #0
 80042c4:	42a6      	cmp	r6, r4
 80042c6:	d109      	bne.n	80042dc <__libc_init_array+0x24>
 80042c8:	4d0b      	ldr	r5, [pc, #44]	@ (80042f8 <__libc_init_array+0x40>)
 80042ca:	4c0c      	ldr	r4, [pc, #48]	@ (80042fc <__libc_init_array+0x44>)
 80042cc:	f000 f818 	bl	8004300 <_init>
 80042d0:	1b64      	subs	r4, r4, r5
 80042d2:	10a4      	asrs	r4, r4, #2
 80042d4:	2600      	movs	r6, #0
 80042d6:	42a6      	cmp	r6, r4
 80042d8:	d105      	bne.n	80042e6 <__libc_init_array+0x2e>
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e0:	4798      	blx	r3
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7ee      	b.n	80042c4 <__libc_init_array+0xc>
 80042e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ea:	4798      	blx	r3
 80042ec:	3601      	adds	r6, #1
 80042ee:	e7f2      	b.n	80042d6 <__libc_init_array+0x1e>
 80042f0:	08004328 	.word	0x08004328
 80042f4:	08004328 	.word	0x08004328
 80042f8:	08004328 	.word	0x08004328
 80042fc:	0800432c 	.word	0x0800432c

08004300 <_init>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr

0800430c <_fini>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr
